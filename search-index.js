var searchIndex = {};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a\nfuture.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which\nproxies the futures running on the thread pool.",null,null],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number\nof CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future\nrepresenting the produced value.",0,null],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,null],[11,"clone","","",0,null],[11,"drop","","",0,null],[11,"poll","","",1,null],[11,"new","","Create a builder a number of workers equal to the number\nof CPUs on the host.",2,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",2,null],[11,"after_start","","Execute function `f` right after each thread is started but before\nrunning any jobs on it",2,null],[11,"before_stop","","Execute function `f` before each worker thread stops",2,null],[11,"create","","Create CpuPool with configured parameters",2,null]],"paths":[[3,"CpuPool"],[3,"CpuFuture"],[3,"Builder"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[3,"Done","futures","A future representing a value that is immediately ready.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Failed","","A future representing a finished but erroneous computation.",null,null],[3,"Finished","","A future representing a finished successful computation.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is\nscheduled.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of\nanother future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just\nthe result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a\nfuture-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which &quot;fuse&quot;s a future once it&#39;s been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future\n(whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to\ncomplete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to\ncomplete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to\ncomplete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to\ncomplete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of\na future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to\ncomplete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of\nanother future regardless of its outcome.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the\ncompleted values.",null,null],[3,"Oneshot","","A future representing the completion of a computation happening elsewhere in\nmemory.",null,null],[3,"Complete","","Represents the completion half of a oneshot through which the result of a\ncomputation is signaled.",null,null],[3,"Canceled","","Error returned from a `Oneshot&lt;T&gt;` whenever the correponding `Complete&lt;T&gt;`\nis dropped.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of\nfutures to complete.",null,null],[3,"SelectAllNext","","Future yielded as the result in a `SelectAll` future.",null,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[5,"done","","Creates a new &quot;leaf future&quot; which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"done"}}],[5,"empty","","Creates a future which never resolves, representing a computation that never\nfinishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"failed","","Creates a &quot;leaf future&quot; from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"failed"}}],[5,"finished","","Creates a &quot;leaf future&quot; from an immediate value of a finished and\nsuccessful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"finished"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created\nby the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"collect","","Creates a future which represents a collection of the results of the futures\ngiven.",null,{"inputs":[{"name":"i"}],"output":{"name":"collect"}}],[5,"oneshot","","Creates a new in-memory oneshot used to represent completing a computation.",null,null],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"map","","Change the success type of this `Async` value with the closure provided",0,null],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,null],[11,"is_ready","","Returns whether this is `Async::Ready`",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"poll","","",1,null],[11,"poll","","",2,null],[11,"poll","","",3,null],[11,"poll","","",4,null],[11,"poll","","",5,null],[11,"poll","","",6,null],[11,"poll","","",7,null],[11,"poll","","",8,null],[11,"poll","","",9,null],[11,"poll","","",10,null],[11,"poll","","",11,null],[11,"poll","","",12,null],[11,"poll","","",13,null],[11,"poll","","",14,null],[11,"poll","","",15,null],[11,"poll","","",16,null],[11,"poll","","",17,null],[11,"poll","","",18,null],[11,"poll","","",19,null],[11,"poll","","",20,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"TaskRc","futures::task","A reference to a piece of data that&#39;s accessible only within a specific\n`Task`.",null,null],[3,"LocalKey","","A key for task-local data stored in a future&#39;s task.",null,null],[3,"Task","","A handle to a &quot;task&quot;, which represents a single lightweight &quot;thread&quot; of\nexecution driving a future to completion.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created\ninternally.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"park","","Returns a handle to the current task to call `unpark` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"spawn","","Spawns a new future, returning the fused future and task.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_unpark_event","","For the duration of the given callback, add an &quot;unpark event&quot; to be\ntriggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[11,"new","","Inserts a new piece of task-local data into this task, returning a\nreference to it.",21,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",21,null],[11,"clone","","",21,null],[11,"with","","Access this task-local key, running the provided closure with a\nreference to the value.",22,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to\nmake progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make\nprogress.",23,null],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",24,null],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",25,null],[11,"clone","","",26,null],[11,"unpark","","Indicate that the task should attempt to poll its future in a timely\nfashion. This is typically done when alerting a future that an event of\ninterest has occurred through `Task::unpark`.",26,null],[11,"is_current","","Returns `true` when called from within the context of the task. In\nother words, the task is currently running on the thread calling the\nfunction.",26,null],[11,"fmt","","",26,null],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the\n`unpark` argument.",27,null],[11,"wait_future","","Waits for the internal future to complete, blocking this thread&#39;s\nexecution until it does.",27,null],[11,"execute","","A specialized function to request running a future to completion on the\nspecified executor.",27,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",27,null],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on\nthe underlying stream.",27,null],[11,"run","","Actually run the task (invoking `poll` on its future) on the current\nthread.",28,null],[11,"clone","","",29,null],[11,"new","","Construct an unpark event that will insert `id` into `set` when\ntriggered.",29,{"inputs":[{"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"poll","futures","",30,null],[11,"poll","","",31,null],[11,"complete","","Completes this oneshot with a successful result.",32,null],[11,"poll_cancel","","Polls this `Complete` half to detect whether the `Oneshot` this has\npaired with has gone away.",32,null],[11,"drop","","",32,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[11,"fmt","","",33,null],[11,"description","","",33,null],[11,"poll","","",34,null],[11,"drop","","",34,null],[11,"poll","","",35,null],[11,"poll","","",36,null],[0,"stream","","Asynchronous streams",null,null],[3,"IterStream","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a\nstream.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield\nsome values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map\nthem to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of\nelements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a\nstream.",null,null],[3,"Fuse","","A stream which &quot;fuse&quot;s a stream once it&#39;s terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one\ntype to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one\ntype to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a\nstream.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate\nholds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a\nstream.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if\npossible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if\npossible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"FutureSender","","A future returned by the `Sender::send` method which will resolve to the\nsender once it&#39;s available to send another message.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a **blocking\niterator**.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or\nboth of the underlying streams.",null,null],[13,"First","","An item from the first stream",37,null],[13,"Second","","An item from the second stream",37,null],[13,"Both","","Items from both streams",37,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready\nto yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterstream"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[11,"poll","","",38,null],[11,"poll","","",39,null],[11,"poll","","",40,null],[11,"poll","","",41,null],[11,"poll","","",42,null],[11,"poll","","",43,null],[11,"poll","","",44,null],[11,"poll","","",45,null],[11,"poll","","",46,null],[11,"is_done","","Returns whether the underlying stream has finished or not.",46,null],[11,"poll","","",47,null],[11,"poll","","",48,null],[11,"poll","","",49,null],[11,"poll","","",50,null],[11,"poll","","",51,null],[11,"poll","","",52,null],[11,"poll","","",53,null],[11,"peek","","Peek retrieves a reference to the next item in the stream.",53,null],[11,"poll","","",54,null],[11,"poll","","",55,null],[11,"poll","","",56,null],[11,"poll","","",57,null],[11,"poll","","",58,null],[11,"poll","","",59,null],[11,"poll","","",60,null],[11,"poll","","",61,null],[11,"poll","","",62,null],[11,"drop","","",62,null],[11,"send","","Sends a new value along this channel to the receiver.",63,null],[11,"drop","","",63,null],[11,"poll","","",64,null],[11,"poll","","",65,null],[11,"next","","",66,null],[6,"BoxStream","","A type alias for `Box&lt;Stream + Send&gt;`",null,null],[8,"Stream","","A stream of values, not all of which have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",67,null],[16,"Error","","The type of error this stream may generate.",67,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if\nthe stream is finished.",67,null],[11,"wait","","Creates an iterator which blocks the current thread until each item of\nthis stream is resolved.",67,null],[11,"boxed","","Convenience function for turning this stream into a trait object.",67,null],[11,"into_future","","Converts this stream into a `Future`.",67,null],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",67,null],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",67,null],[11,"filter","","Filters the values produced by this stream according to the provided\npredicate.",67,null],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping\nthem to a different type.",67,null],[11,"then","","Chain on a computation for when a value is ready, passing the resulting\nitem to the provided closure `f`.",67,null],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful\nresults to the provided closure `f`.",67,null],[11,"or_else","","Chain on a computation for when an error happens, passing the\nerroneous result to the provided closure `f`.",67,null],[11,"collect","","Collect all of the values of this stream into a vector, returning a\nfuture representing the result of that computation.",67,null],[11,"fold","","Execute an accumulating computation over a stream, collecting all the\nvalues into one final result.",67,null],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",67,null],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to\n`true`.",67,null],[11,"for_each","","Runs this stream to completion, executing the provided closure for each\nelement on the stream.",67,null],[11,"take","","Creates a new stream of at most `amt` items.",67,null],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",67,null],[11,"fuse","","Fuse a stream such that `poll`/`schedule` will never again be called\nonce it has terminated (signaled emptyness or an error).",67,null],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",67,null],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",67,null],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",67,null],[11,"merge","","An adapter for merging the output of two streams.",67,null],[11,"zip","","An adapter for zipping two streams together.",67,null],[11,"peekable","","Creates a new stream which exposes a `peek` method.",67,null],[6,"Poll","futures","Return type of the `Future::poll` method, indicates whether a future&#39;s value\nis ready or not.",null,null],[6,"BoxFuture","","A type alias for `Box&lt;Future + Send&gt;`",null,null],[8,"Future","","Trait for types which are a placeholder of a value that will become\navailable at possible some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is\nsuccessful.",68,null],[16,"Error","","The type of error that this future will resolve with if it fails in a\nnormal fashion.",68,null],[10,"poll","","Query this future to see if its value has become available, registering\ninterest if it is not.",68,null],[11,"wait","","Block the current thread until this future is resolved.",68,null],[11,"boxed","","Convenience function for turning this future into a trait object.",68,null],[11,"map","","Map this future&#39;s result to a different type, returning a new future of\nthe resulting type.",68,null],[11,"map_err","","Map this future&#39;s error to a different error, returning a new future.",68,null],[11,"then","","Chain on a computation for when a future finished, passing the result of\nthe future to the provided closure `f`.",68,null],[11,"and_then","","Execute another future after this one has resolved successfully.",68,null],[11,"or_else","","Execute another future if this one resolves with an error.",68,null],[11,"select","","Waits for either one of two futures to complete.",68,null],[11,"join","","Joins the result of two futures, waiting for them both to complete.",68,null],[11,"join3","","Same as `join`, but with more futures.",68,null],[11,"join4","","Same as `join`, but with more futures.",68,null],[11,"join5","","Same as `join`, but with more futures.",68,null],[11,"into_stream","","Convert this future into single element stream.",68,null],[11,"flatten","","Flatten the execution of this future when the successful result of this\nfuture is itself another future.",68,null],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this\nfuture is a stream.",68,null],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has\ncompleted.",68,null],[11,"catch_unwind","","Catches unwinding panics while polling the future.",68,null],[8,"IntoFuture","","Class of types which can be converted themselves into a future.",null,null],[16,"Future","","The future that this type can be converted into.",69,null],[16,"Item","","The item that the future may resolve with.",69,null],[16,"Error","","The error that the future may resolve with.",69,null],[10,"into_future","","Consumes this object and produces a future.",69,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll&lt;T, E&gt;`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null]],"paths":[[4,"Async"],[3,"Done"],[3,"Empty"],[3,"Failed"],[3,"Finished"],[3,"Lazy"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Then"],[3,"TaskRc"],[3,"LocalKey"],[8,"Unpark"],[8,"Executor"],[8,"EventSet"],[3,"Task"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"CatchUnwind"],[3,"Collect"],[3,"Complete"],[3,"Canceled"],[3,"Oneshot"],[3,"SelectAll"],[3,"SelectAllNext"],[4,"MergedItem"],[3,"IterStream"],[3,"AndThen"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"Fuse"],[3,"StreamFuture"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"Then"],[3,"Zip"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Receiver"],[3,"Sender"],[3,"FutureSender"],[3,"Collect"],[3,"Wait"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"]]};
initSearch(searchIndex);
